2019-07-02 00:03:54.586 +12:00 [INF] User profile is available. Using 'C:\Users\lgx95\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 00:03:55.502 +12:00 [INF] Request starting HTTP/1.1 DEBUG http://localhost:5000/  0
2019-07-02 00:03:55.502 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/values  
2019-07-02 00:03:55.537 +12:00 [INF] Request finished in 35.6291ms 200 
2019-07-02 00:03:55.584 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 00:03:55.986 +12:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller Pegasus_backend.Controllers.ValuesController (Pegasus_backend).
2019-07-02 00:03:56.239 +12:00 [INF] Executing action method Pegasus_backend.Controllers.ValuesController.Get (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:03:56.367 +12:00 [ERR] ValuesController LogErrorToFile: System.Exception: Exception of type 'System.Exception' was thrown.
   at Pegasus_backend.Controllers.ValuesController.Get() in C:\angular\pegasusBackend\Controllers\ValuesController.cs:line 26
2019-07-02 00:03:56.368 +12:00 [INF] ValuesController LogInfoToFile: hello
2019-07-02 00:03:56.372 +12:00 [INF] Executed action method Pegasus_backend.Controllers.ValuesController.Get (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 121.6785ms.
2019-07-02 00:03:56.383 +12:00 [INF] Executing ObjectResult, writing value of type 'System.DateTime'.
2019-07-02 00:03:56.439 +12:00 [INF] Executed action Pegasus_backend.Controllers.ValuesController.Get (Pegasus_backend) in 447.1105ms
2019-07-02 00:03:56.446 +12:00 [INF] Request finished in 948.6598ms 200 application/json; charset=utf-8
2019-07-02 00:03:56.951 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  
2019-07-02 00:03:56.955 +12:00 [INF] Request finished in 4.3917ms 404 
2019-07-02 00:05:19.744 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Chat/GetChattingList/10065 application/json 65
2019-07-02 00:05:19.816 +12:00 [INF] Route matched with {action = "GetChattingList", controller = "Chat"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetChattingList(Int32) on controller Pegasus_backend.Controllers.MobileControllers.ChatController (Pegasus_backend).
2019-07-02 00:05:19.838 +12:00 [INF] Executing action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:05:20.905 +12:00 [INF] Entity Framework Core 2.1.11-servicing-32099 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 00:05:21.863 +12:00 [INF] Executed DbCommand (44ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`user_id`, `x`.`created_at`, `x`.`is_activate`, `x`.`password`, `x`.`role_id`, `x`.`unread_message_id`, `x`.`user_name`, `x.Role`.`role_id`, `x.Role`.`role_name`
FROM `ablemusic`.`user` AS `x`
LEFT JOIN `ablemusic`.`role` AS `x.Role` ON `x`.`role_id` = `x.Role`.`role_id`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:05:21.992 +12:00 [INF] Executed action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkResult in 2153.6776ms.
2019-07-02 00:05:21.995 +12:00 [INF] Executing HttpStatusCodeResult, setting HTTP status code 200
2019-07-02 00:05:21.995 +12:00 [INF] Executed action Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) in 2179.358ms
2019-07-02 00:05:21.996 +12:00 [INF] Request finished in 2252.2306ms 200 
2019-07-02 00:05:22.008 +12:00 [INF] Connection id "0HLNU3GOFDRPO", Request id "0HLNU3GOFDRPO:00000001": the application completed without reading the entire request body.
2019-07-02 00:06:33.868 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Chat/GetChattingList/10091 application/json 65
2019-07-02 00:06:33.885 +12:00 [INF] Route matched with {action = "GetChattingList", controller = "Chat"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetChattingList(Int32) on controller Pegasus_backend.Controllers.MobileControllers.ChatController (Pegasus_backend).
2019-07-02 00:06:33.886 +12:00 [INF] Executing action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:06:33.887 +12:00 [INF] Entity Framework Core 2.1.11-servicing-32099 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 00:06:33.984 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`user_id`, `x`.`created_at`, `x`.`is_activate`, `x`.`password`, `x`.`role_id`, `x`.`unread_message_id`, `x`.`user_name`, `x.Role`.`role_id`, `x.Role`.`role_name`
FROM `ablemusic`.`user` AS `x`
LEFT JOIN `ablemusic`.`role` AS `x.Role` ON `x`.`role_id` = `x.Role`.`role_id`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:06:33.985 +12:00 [INF] Executed action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkResult in 98.6563ms.
2019-07-02 00:06:33.985 +12:00 [INF] Executing HttpStatusCodeResult, setting HTTP status code 200
2019-07-02 00:06:33.985 +12:00 [INF] Executed action Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) in 100.09570000000001ms
2019-07-02 00:06:33.986 +12:00 [INF] Request finished in 123.3233ms 200 
2019-07-02 00:06:33.986 +12:00 [INF] Connection id "0HLNU3GOFDRPP", Request id "0HLNU3GOFDRPP:00000001": the application completed without reading the entire request body.
2019-07-02 00:07:16.941 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Chat/GetChattingList/10091 application/json 65
2019-07-02 00:07:16.942 +12:00 [INF] Route matched with {action = "GetChattingList", controller = "Chat"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetChattingList(Int32) on controller Pegasus_backend.Controllers.MobileControllers.ChatController (Pegasus_backend).
2019-07-02 00:07:16.944 +12:00 [INF] Executing action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:07:16.945 +12:00 [INF] Entity Framework Core 2.1.11-servicing-32099 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 00:07:17.035 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`user_id`, `x`.`created_at`, `x`.`is_activate`, `x`.`password`, `x`.`role_id`, `x`.`unread_message_id`, `x`.`user_name`, `x.Role`.`role_id`, `x.Role`.`role_name`
FROM `ablemusic`.`user` AS `x`
LEFT JOIN `ablemusic`.`role` AS `x.Role` ON `x`.`role_id` = `x.Role`.`role_id`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:07:28.145 +12:00 [INF] Executed action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkResult in 11201.267800000001ms.
2019-07-02 00:07:28.145 +12:00 [INF] Executing HttpStatusCodeResult, setting HTTP status code 200
2019-07-02 00:07:28.146 +12:00 [INF] Executed action Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) in 11202.813400000001ms
2019-07-02 00:07:28.146 +12:00 [INF] Request finished in 11204.7797ms 200 
2019-07-02 00:07:28.146 +12:00 [INF] Connection id "0HLNU3GOFDRPP", Request id "0HLNU3GOFDRPP:00000002": the application completed without reading the entire request body.
2019-07-02 00:07:30.996 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Chat/GetChattingList/10091 application/json 65
2019-07-02 00:07:30.996 +12:00 [INF] Route matched with {action = "GetChattingList", controller = "Chat"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetChattingList(Int32) on controller Pegasus_backend.Controllers.MobileControllers.ChatController (Pegasus_backend).
2019-07-02 00:07:30.998 +12:00 [INF] Executing action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:07:30.998 +12:00 [INF] Entity Framework Core 2.1.11-servicing-32099 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 00:07:31.087 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`user_id`, `x`.`created_at`, `x`.`is_activate`, `x`.`password`, `x`.`role_id`, `x`.`unread_message_id`, `x`.`user_name`, `x.Role`.`role_id`, `x.Role`.`role_name`
FROM `ablemusic`.`user` AS `x`
LEFT JOIN `ablemusic`.`role` AS `x.Role` ON `x`.`role_id` = `x.Role`.`role_id`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:08:07.805 +12:00 [INF] User profile is available. Using 'C:\Users\lgx95\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 00:08:08.564 +12:00 [INF] Request starting HTTP/1.1 DEBUG http://localhost:5000/  0
2019-07-02 00:08:08.564 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/values  
2019-07-02 00:08:08.590 +12:00 [INF] Request finished in 27.1388ms 200 
2019-07-02 00:08:08.626 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 00:08:08.848 +12:00 [INF] Route matched with {action = "Get", controller = "Values"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller Pegasus_backend.Controllers.ValuesController (Pegasus_backend).
2019-07-02 00:08:09.014 +12:00 [INF] Executing action method Pegasus_backend.Controllers.ValuesController.Get (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:08:09.150 +12:00 [ERR] ValuesController LogErrorToFile: System.Exception: Exception of type 'System.Exception' was thrown.
   at Pegasus_backend.Controllers.ValuesController.Get() in C:\angular\pegasusBackend\Controllers\ValuesController.cs:line 26
2019-07-02 00:08:09.150 +12:00 [INF] ValuesController LogInfoToFile: hello
2019-07-02 00:08:09.154 +12:00 [INF] Executed action method Pegasus_backend.Controllers.ValuesController.Get (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 129.80180000000001ms.
2019-07-02 00:08:09.163 +12:00 [INF] Executing ObjectResult, writing value of type 'System.DateTime'.
2019-07-02 00:08:09.212 +12:00 [INF] Executed action Pegasus_backend.Controllers.ValuesController.Get (Pegasus_backend) in 360.94140000000004ms
2019-07-02 00:08:09.216 +12:00 [INF] Request finished in 656.2772ms 200 application/json; charset=utf-8
2019-07-02 00:08:36.525 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Chat/GetChattingList/10091 application/json 65
2019-07-02 00:08:36.565 +12:00 [INF] Route matched with {action = "GetChattingList", controller = "Chat"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetChattingList(Int32) on controller Pegasus_backend.Controllers.MobileControllers.ChatController (Pegasus_backend).
2019-07-02 00:08:36.580 +12:00 [INF] Executing action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:08:37.624 +12:00 [INF] Entity Framework Core 2.1.11-servicing-32099 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 00:08:38.619 +12:00 [INF] Executed DbCommand (36ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`user_id`, `x`.`created_at`, `x`.`is_activate`, `x`.`password`, `x`.`role_id`, `x`.`unread_message_id`, `x`.`user_name`, `x.Role`.`role_id`, `x.Role`.`role_name`
FROM `ablemusic`.`user` AS `x`
LEFT JOIN `ablemusic`.`role` AS `x.Role` ON `x`.`role_id` = `x.Role`.`role_id`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:08:45.564 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`learner_id`, `x`.`address`, `x`.`contact_num`, `x`.`created_at`, `x`.`dob`, `x`.`email`, `x`.`enroll_date`, `x`.`first_name`, `x`.`form_url`, `x`.`g5_certification`, `x`.`gender`, `x`.`is_abrsm_g5`, `x`.`is_active`, `x`.`is_under_18`, `x`.`last_name`, `x`.`learner_level`, `x`.`level_type`, `x`.`middle_name`, `x`.`note`, `x`.`org_id`, `x`.`otherfile_url`, `x`.`payment_period`, `x`.`photo`, `x`.`referrer`, `x`.`referrer_learner_id`, `x`.`user_id`
FROM `ablemusic`.`learner` AS `x`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:08:45.680 +12:00 [WRN] The LINQ expression 'where ([x].EndTime >= Convert(DateTime.Now, Nullable`1))' could not be translated and will be evaluated locally.
2019-07-02 00:08:45.788 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__learnerId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`lesson_id`, `x`.`begin_time`, `x`.`course_instance_id`, `x`.`created_at`, `x`.`end_time`, `x`.`group_course_instance_id`, `x`.`invoice_id`, `x`.`is_canceled`, `x`.`is_changed`, `x`.`is_confirm`, `x`.`is_trial`, `x`.`learner_id`, `x`.`org_id`, `x`.`reason`, `x`.`room_id`, `x`.`teacher_id`, `x`.`trial_course_id`, `x.Learner`.`learner_id`, `x.Learner`.`address`, `x.Learner`.`contact_num`, `x.Learner`.`created_at`, `x.Learner`.`dob`, `x.Learner`.`email`, `x.Learner`.`enroll_date`, `x.Learner`.`first_name`, `x.Learner`.`form_url`, `x.Learner`.`g5_certification`, `x.Learner`.`gender`, `x.Learner`.`is_abrsm_g5`, `x.Learner`.`is_active`, `x.Learner`.`is_under_18`, `x.Learner`.`last_name`, `x.Learner`.`learner_level`, `x.Learner`.`level_type`, `x.Learner`.`middle_name`, `x.Learner`.`note`, `x.Learner`.`org_id`, `x.Learner`.`otherfile_url`, `x.Learner`.`payment_period`, `x.Learner`.`photo`, `x.Learner`.`referrer`, `x.Learner`.`referrer_learner_id`, `x.Learner`.`user_id`
FROM `ablemusic`.`lesson` AS `x`
LEFT JOIN `ablemusic`.`learner` AS `x.Learner` ON `x`.`learner_id` = `x.Learner`.`learner_id`
WHERE ((`x`.`learner_id` = @__learnerId_0) AND (`x`.`is_canceled` = 0)) AND (`x`.`is_trial` = 0)
2019-07-02 00:08:45.837 +12:00 [WRN] Query: '(from Staff <generated>_1 in DbSet<Staff> select [<generated>_1]).Take(__p_0)' uses a row limiting operation (Skip/Take) without OrderBy which may lead to unpredictable results.
2019-07-02 00:08:45.932 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `s`.`staff_id`, `s`.`dob`, `s`.`email`, `s`.`expiry_date`, `s`.`first_name`, `s`.`gender`, `s`.`home_phone`, `s`.`id_number`, `s`.`id_photo`, `s`.`id_type`, `s`.`ird_number`, `s`.`is_activate`, `s`.`last_name`, `s`.`mobile_phone`, `s`.`photo`, `s`.`user_id`, `s`.`visa`
FROM `ablemusic`.`staff` AS `s`
LIMIT @__p_0
2019-07-02 00:08:45.950 +12:00 [INF] Executed action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 9370.0588ms.
2019-07-02 00:08:45.950 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[Pegasus_backend.Models.ChatListModel, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-07-02 00:08:46.084 +12:00 [INF] Executed action Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) in 9518.9318ms
2019-07-02 00:08:46.085 +12:00 [INF] Request finished in 9559.8037ms 200 application/json; charset=utf-8
2019-07-02 00:08:46.097 +12:00 [INF] Connection id "0HLNU3J3T748K", Request id "0HLNU3J3T748K:00000002": the application completed without reading the entire request body.
2019-07-02 00:22:14.846 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/Chat/GetChattingList/10091 application/json 65
2019-07-02 00:22:14.847 +12:00 [INF] Route matched with {action = "GetChattingList", controller = "Chat"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetChattingList(Int32) on controller Pegasus_backend.Controllers.MobileControllers.ChatController (Pegasus_backend).
2019-07-02 00:22:14.849 +12:00 [INF] Executing action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) - Validation state: "Valid"
2019-07-02 00:22:14.851 +12:00 [INF] Entity Framework Core 2.1.11-servicing-32099 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 00:22:15.282 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`user_id`, `x`.`created_at`, `x`.`is_activate`, `x`.`password`, `x`.`role_id`, `x`.`unread_message_id`, `x`.`user_name`, `x.Role`.`role_id`, `x.Role`.`role_name`
FROM `ablemusic`.`user` AS `x`
LEFT JOIN `ablemusic`.`role` AS `x.Role` ON `x`.`role_id` = `x.Role`.`role_id`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:22:15.374 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`learner_id`, `x`.`address`, `x`.`contact_num`, `x`.`created_at`, `x`.`dob`, `x`.`email`, `x`.`enroll_date`, `x`.`first_name`, `x`.`form_url`, `x`.`g5_certification`, `x`.`gender`, `x`.`is_abrsm_g5`, `x`.`is_active`, `x`.`is_under_18`, `x`.`last_name`, `x`.`learner_level`, `x`.`level_type`, `x`.`middle_name`, `x`.`note`, `x`.`org_id`, `x`.`otherfile_url`, `x`.`payment_period`, `x`.`photo`, `x`.`referrer`, `x`.`referrer_learner_id`, `x`.`user_id`
FROM `ablemusic`.`learner` AS `x`
WHERE `x`.`user_id` = @__id_0
LIMIT 1
2019-07-02 00:22:15.471 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__learnerId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `x`.`lesson_id`, `x`.`begin_time`, `x`.`course_instance_id`, `x`.`created_at`, `x`.`end_time`, `x`.`group_course_instance_id`, `x`.`invoice_id`, `x`.`is_canceled`, `x`.`is_changed`, `x`.`is_confirm`, `x`.`is_trial`, `x`.`learner_id`, `x`.`org_id`, `x`.`reason`, `x`.`room_id`, `x`.`teacher_id`, `x`.`trial_course_id`, `x.Learner`.`learner_id`, `x.Learner`.`address`, `x.Learner`.`contact_num`, `x.Learner`.`created_at`, `x.Learner`.`dob`, `x.Learner`.`email`, `x.Learner`.`enroll_date`, `x.Learner`.`first_name`, `x.Learner`.`form_url`, `x.Learner`.`g5_certification`, `x.Learner`.`gender`, `x.Learner`.`is_abrsm_g5`, `x.Learner`.`is_active`, `x.Learner`.`is_under_18`, `x.Learner`.`last_name`, `x.Learner`.`learner_level`, `x.Learner`.`level_type`, `x.Learner`.`middle_name`, `x.Learner`.`note`, `x.Learner`.`org_id`, `x.Learner`.`otherfile_url`, `x.Learner`.`payment_period`, `x.Learner`.`photo`, `x.Learner`.`referrer`, `x.Learner`.`referrer_learner_id`, `x.Learner`.`user_id`
FROM `ablemusic`.`lesson` AS `x`
LEFT JOIN `ablemusic`.`learner` AS `x.Learner` ON `x`.`learner_id` = `x.Learner`.`learner_id`
WHERE ((`x`.`learner_id` = @__learnerId_0) AND (`x`.`is_canceled` = 0)) AND (`x`.`is_trial` = 0)
2019-07-02 00:22:15.560 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `s`.`staff_id`, `s`.`dob`, `s`.`email`, `s`.`expiry_date`, `s`.`first_name`, `s`.`gender`, `s`.`home_phone`, `s`.`id_number`, `s`.`id_photo`, `s`.`id_type`, `s`.`ird_number`, `s`.`is_activate`, `s`.`last_name`, `s`.`mobile_phone`, `s`.`photo`, `s`.`user_id`, `s`.`visa`
FROM `ablemusic`.`staff` AS `s`
LIMIT @__p_0
2019-07-02 00:22:15.561 +12:00 [INF] Executed action method Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 711.73390000000006ms.
2019-07-02 00:22:15.561 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[Pegasus_backend.Models.ChatListModel, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2019-07-02 00:22:15.562 +12:00 [INF] Executed action Pegasus_backend.Controllers.MobileControllers.ChatController.GetChattingList (Pegasus_backend) in 714.5429ms
2019-07-02 00:22:15.563 +12:00 [INF] Request finished in 716.117ms 200 application/json; charset=utf-8
2019-07-02 00:22:15.563 +12:00 [INF] Connection id "0HLNU3J3T748M", Request id "0HLNU3J3T748M:00000001": the application completed without reading the entire request body.
2019-07-02 10:50:13.629 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 10:50:53.082 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 10:50:53.134 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 10:50:53.518 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 10:50:54.101 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 10:50:55.178 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 10:50:56.439 +12:00 [INF] Executed DbCommand (47ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 10:50:56.608 +12:00 [WRN] The Include operation for navigation '[lr].Term' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
2019-07-02 10:50:56.612 +12:00 [WRN] The Include operation for navigation '[lr].CourseInstance.Course' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
2019-07-02 10:50:56.613 +12:00 [WRN] The Include operation for navigation '[lr].GroupCourseInstance.Course' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
2019-07-02 10:50:56.832 +12:00 [INF] Executed DbCommand (43ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id` AS `LessonRemainId`, `lr`.`quantity`, `lr`.`term_id` AS `TermId0`, `lr`.`expiry_date` AS `ExpiryDate`, `lr`.`course_instance_id` AS `GroupCourseInstanceId`, `lr`.`learner_id` AS `LearnerId`, `lr.CourseInstance.Course`.`course_id` AS `CourseId`, `lr.CourseInstance.Course`.`course_name` AS `CourseName`, `lr.GroupCourseInstance.Course`.`course_id` AS `CourseId0`, `lr.GroupCourseInstance.Course`.`course_name` AS `CourseName0`, `lr`.`term_id` AS `TermId`, `lr.Term`.`term_name` AS `TermName`, `lr.Term`.`begin_date` AS `BeginDate`, `lr.Term`.`end_date` AS `EndDate`, `lr.Term`.`term_type` AS `TermType`, `lr.Term`.`week_quantity` AS `WeekQuantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 10:50:56.916 +12:00 [ERR] An exception occurred in the database while iterating the results of a query for context type 'Pegasus_backend.pegasusContext.ablemusicContext'.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
2019-07-02 10:50:56.925 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 3403.3354ms
2019-07-02 10:50:56.933 +12:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Pegasus_backend.Services.DataService.CalculateQuantity(IEnumerable`1 unconfirmedLessons, IEnumerable`1 lr) in G:\Project\pegasusBackend\Services\DataService.cs:line 275
   at Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons(Int32 studentId) in G:\Project\pegasusBackend\Controllers\CourseRemainingController.cs:line 51
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.SyncObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-07-02 10:50:57.054 +12:00 [INF] Request finished in 3974.8443ms 500 text/html; charset=utf-8
2019-07-02 11:09:52.600 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:09:56.299 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 11:09:56.349 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:09:56.589 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 11:09:57.121 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 11:09:58.161 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:09:59.059 +12:00 [INF] Executed DbCommand (46ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 11:09:59.234 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.239 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_3 in [gc] select (Nullable<int>)[<generated>_3].CourseId).Firs...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.240 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_1 in [o2o] select (Nullable<int>)[<generated>_1].CourseInsta...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.241 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.242 +12:00 [WRN] Query: '(from Course <generated>_1 in [c] select (Nullable<int>)[<generated>_1].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.244 +12:00 [WRN] Query: '(from Course <generated>_3 in [c] select [<generated>_3].CourseName).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.266 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_1 in [gc] select (Nullable<int>)[<generated>_1].GroupCourseIns...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.268 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_3 in [gc] select (Nullable<int>)[<generated>_3].CourseId).Firs...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.271 +12:00 [WRN] Query: '(from Course <generated>_1 in [c] select (Nullable<int>)[<generated>_1].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.278 +12:00 [WRN] Query: '(from Course <generated>_3 in [c] select [<generated>_3].CourseName).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:09:59.346 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.354 +12:00 [WRN] The LINQ expression 'join Course c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.Course]) on {from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId => FirstOrDefault()} equals Convert([c].CourseId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.368 +12:00 [WRN] The LINQ expression 'join GroupCourseInstance gc in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.GroupCourseInstance]) on [lr].CourseInstanceId equals Convert([gc].GroupCourseInstanceId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.371 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.375 +12:00 [WRN] The LINQ expression 'join Course c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.Course]) on Convert({from GroupCourseInstance <generated>_3 in [gc] select Convert([<generated>_3].CourseId, Nullable`1) => FirstOrDefault()}, Int32) equals [c].CourseId' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.382 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.384 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.385 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.386 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.388 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.389 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.390 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.392 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.395 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.397 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.398 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.400 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.430 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.433 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.435 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.437 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.439 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.441 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.443 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.445 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.447 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:09:59.606 +12:00 [INF] Executed DbCommand (37ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id` AS `LessonRemainId`, `lr`.`course_instance_id` AS `GroupCourseInstanceId`, `lr`.`expiry_date` AS `ExpiryDate`, `lr`.`group_course_instance_id`, `lr`.`learner_id` AS `LearnerId`, `lr`.`quantity`, `lr`.`term_id` AS `TermId`, `t`.`term_id`, `t`.`begin_date`, `t`.`end_date`, `t`.`term_name`, `t`.`term_type`, `t`.`week_quantity`, `o2o`.`course_instance_id`, `o2o`.`begin_date`, `o2o`.`course_id`, `o2o`.`end_date`, `o2o`.`invoice_date`, `o2o`.`learner_id`, `o2o`.`org_id`, `o2o`.`room_id`, `o2o`.`teacher_id`
FROM `ablemusic`.`lesson_remain` AS `lr`
INNER JOIN `ablemusic`.`term` AS `t` ON `lr`.`term_id` = `t`.`term_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `o2o` ON `lr`.`course_instance_id` = `o2o`.`course_instance_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:09:59.752 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `c`.`course_id`, `c`.`course_category_id`, `c`.`course_name`, `c`.`course_type`, `c`.`duration`, `c`.`level`, `c`.`price`, `c`.`teacher_level`
FROM `ablemusic`.`course` AS `c`
2019-07-02 11:09:59.863 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `gc`.`group_course_instance_id`, `gc`.`begin_date`, `gc`.`course_id`, `gc`.`end_date`, `gc`.`invoice_date`, `gc`.`is_activate`, `gc`.`is_started`, `gc`.`org_id`, `gc`.`room_id`, `gc`.`teacher_id`
FROM `ablemusic`.`group_course_instance` AS `gc`
2019-07-02 11:10:00.001 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `c0`.`course_id`, `c0`.`course_category_id`, `c0`.`course_name`, `c0`.`course_type`, `c0`.`duration`, `c0`.`level`, `c0`.`price`, `c0`.`teacher_level`
FROM `ablemusic`.`course` AS `c0`
2019-07-02 11:10:00.066 +12:00 [ERR] An exception occurred in the database while iterating the results of a query for context type 'Pegasus_backend.pegasusContext.ablemusicContext'.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
2019-07-02 11:10:00.079 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 3485.9662000000003ms
2019-07-02 11:10:00.082 +12:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Pegasus_backend.Services.DataService.CalculateQuantity(IEnumerable`1 unconfirmedLessons, IEnumerable`1 lr) in G:\Project\pegasusBackend\Services\DataService.cs:line 338
   at Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons(Int32 studentId) in G:\Project\pegasusBackend\Controllers\CourseRemainingController.cs:line 51
   at lambda_method(Closure , Object , Object[] )
   at Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(Object target, Object[] parameters)
   at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.SyncObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-07-02 11:10:00.161 +12:00 [INF] Request finished in 3862.6295ms 500 text/html; charset=utf-8
2019-07-02 11:12:12.934 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:12:19.736 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 11:12:19.787 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:12:20.014 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 11:12:20.612 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 11:12:21.698 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:12:21.719 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 1094.0525ms.
2019-07-02 11:12:21.730 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.pegasusContext.LessonRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 11:12:21.834 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.839 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_3 in [gc] select (Nullable<int>)[<generated>_3].CourseId).Firs...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.840 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_1 in [o2o] select (Nullable<int>)[<generated>_1].CourseInsta...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.841 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.842 +12:00 [WRN] Query: '(from Course <generated>_1 in [c] select (Nullable<int>)[<generated>_1].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.843 +12:00 [WRN] Query: '(from Course <generated>_3 in [c] select [<generated>_3].CourseName).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.844 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_1 in [gc] select (Nullable<int>)[<generated>_1].GroupCourseIns...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.846 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_3 in [gc] select (Nullable<int>)[<generated>_3].CourseId).Firs...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.847 +12:00 [WRN] Query: '(from Course <generated>_1 in [c] select (Nullable<int>)[<generated>_1].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.848 +12:00 [WRN] Query: '(from Course <generated>_3 in [c] select [<generated>_3].CourseName).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:12:21.915 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.921 +12:00 [WRN] The LINQ expression 'join Course c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.Course]) on {from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId => FirstOrDefault()} equals Convert([c].CourseId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.928 +12:00 [WRN] The LINQ expression 'join GroupCourseInstance gc in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.GroupCourseInstance]) on [lr].CourseInstanceId equals Convert([gc].GroupCourseInstanceId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.930 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.934 +12:00 [WRN] The LINQ expression 'join Course c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.Course]) on Convert({from GroupCourseInstance <generated>_3 in [gc] select Convert([<generated>_3].CourseId, Nullable`1) => FirstOrDefault()}, Int32) equals [c].CourseId' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.938 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.939 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.940 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.942 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.944 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.946 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.948 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.949 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.950 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.951 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.952 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.953 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.954 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.955 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.956 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.957 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.958 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.959 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.960 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.968 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:21.974 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:12:22.718 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id` AS `LessonRemainId`, `lr`.`course_instance_id` AS `GroupCourseInstanceId`, `lr`.`expiry_date` AS `ExpiryDate`, `lr`.`group_course_instance_id`, `lr`.`learner_id` AS `LearnerId`, `lr`.`quantity`, `lr`.`term_id` AS `TermId`, `t`.`term_id`, `t`.`begin_date`, `t`.`end_date`, `t`.`term_name`, `t`.`term_type`, `t`.`week_quantity`, `o2o`.`course_instance_id`, `o2o`.`begin_date`, `o2o`.`course_id`, `o2o`.`end_date`, `o2o`.`invoice_date`, `o2o`.`learner_id`, `o2o`.`org_id`, `o2o`.`room_id`, `o2o`.`teacher_id`
FROM `ablemusic`.`lesson_remain` AS `lr`
INNER JOIN `ablemusic`.`term` AS `t` ON `lr`.`term_id` = `t`.`term_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `o2o` ON `lr`.`course_instance_id` = `o2o`.`course_instance_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:12:22.917 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `c`.`course_id`, `c`.`course_category_id`, `c`.`course_name`, `c`.`course_type`, `c`.`duration`, `c`.`level`, `c`.`price`, `c`.`teacher_level`
FROM `ablemusic`.`course` AS `c`
2019-07-02 11:12:23.033 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `gc`.`group_course_instance_id`, `gc`.`begin_date`, `gc`.`course_id`, `gc`.`end_date`, `gc`.`invoice_date`, `gc`.`is_activate`, `gc`.`is_started`, `gc`.`org_id`, `gc`.`room_id`, `gc`.`teacher_id`
FROM `ablemusic`.`group_course_instance` AS `gc`
2019-07-02 11:12:23.169 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `c0`.`course_id`, `c0`.`course_category_id`, `c0`.`course_name`, `c0`.`course_type`, `c0`.`duration`, `c0`.`level`, `c0`.`price`, `c0`.`teacher_level`
FROM `ablemusic`.`course` AS `c0`
2019-07-02 11:12:23.227 +12:00 [ERR] An exception occurred in the database while iterating the results of a query for context type 'Pegasus_backend.pegasusContext.ablemusicContext'.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
2019-07-02 11:12:23.253 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 3234.0795000000003ms
2019-07-02 11:12:23.262 +12:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-07-02 11:12:23.291 +12:00 [WRN] The response has already started, the error page middleware will not be executed.
2019-07-02 11:12:23.292 +12:00 [ERR] Connection id "0HLNUF68FGP5T", Request id "0HLNUF68FGP5T:00000001": An unhandled exception was thrown by the application.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2019-07-02 11:12:23.324 +12:00 [INF] Request finished in 3589.9182ms 200 application/json; charset=utf-8
2019-07-02 11:13:04.645 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:13:08.170 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 11:13:08.223 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:13:08.427 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 11:13:08.945 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 11:13:09.986 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:13:10.004 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 1046.7011ms.
2019-07-02 11:13:10.018 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.pegasusContext.LessonRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 11:13:10.112 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.116 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_3 in [gc] select (Nullable<int>)[<generated>_3].CourseId).Firs...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.117 +12:00 [WRN] Query: '(from Term <generated>_1 in [t] select [<generated>_1]).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.118 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_1 in [o2o] select (Nullable<int>)[<generated>_1].CourseInsta...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.119 +12:00 [WRN] Query: '(from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.122 +12:00 [WRN] Query: '(from Course <generated>_1 in [c] select (Nullable<int>)[<generated>_1].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.123 +12:00 [WRN] Query: '(from Course <generated>_3 in [c] select [<generated>_3].CourseName).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.124 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_1 in [gc] select (Nullable<int>)[<generated>_1].GroupCourseIns...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.125 +12:00 [WRN] Query: '(from GroupCourseInstance <generated>_3 in [gc] select (Nullable<int>)[<generated>_3].CourseId).Firs...' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.126 +12:00 [WRN] Query: '(from Course <generated>_1 in [c] select (Nullable<int>)[<generated>_1].CourseId).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.127 +12:00 [WRN] Query: '(from Course <generated>_3 in [c] select [<generated>_3].CourseName).FirstOrDefault()' uses First/FirstOrDefault/Last/LastOrDefault operation without OrderBy and filter which may lead to unpredictable results.
2019-07-02 11:13:10.188 +12:00 [WRN] The LINQ expression 'join One2oneCourseInstance o2o in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.One2oneCourseInstance]) on [lr].CourseInstanceId equals Convert([o2o].CourseInstanceId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.193 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.201 +12:00 [WRN] The LINQ expression 'join Course c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.Course]) on {from One2oneCourseInstance <generated>_3 in [o2o] select [<generated>_3].CourseId => FirstOrDefault()} equals Convert([c].CourseId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.206 +12:00 [WRN] The LINQ expression 'join GroupCourseInstance gc in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.GroupCourseInstance]) on [lr].CourseInstanceId equals Convert([gc].GroupCourseInstanceId, Nullable`1)' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.208 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.214 +12:00 [WRN] The LINQ expression 'join Course c in value(Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[Pegasus_backend.pegasusContext.Course]) on Convert({from GroupCourseInstance <generated>_3 in [gc] select Convert([<generated>_3].CourseId, Nullable`1) => FirstOrDefault()}, Int32) equals [c].CourseId' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.216 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.220 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.221 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.222 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.223 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.224 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.225 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.226 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.227 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.228 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.229 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.230 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.232 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.233 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.235 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.236 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.238 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.239 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.240 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.241 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.242 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:10.242 +12:00 [WRN] The LINQ expression 'FirstOrDefault()' could not be translated and will be evaluated locally.
2019-07-02 11:13:11.032 +12:00 [INF] Executed DbCommand (56ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id` AS `LessonRemainId`, `lr`.`course_instance_id` AS `GroupCourseInstanceId`, `lr`.`expiry_date` AS `ExpiryDate`, `lr`.`group_course_instance_id`, `lr`.`learner_id` AS `LearnerId`, `lr`.`quantity`, `lr`.`term_id` AS `TermId`, `t`.`term_id`, `t`.`begin_date`, `t`.`end_date`, `t`.`term_name`, `t`.`term_type`, `t`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`term` AS `t` ON `lr`.`term_id` = `t`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:13:11.167 +12:00 [INF] Executed DbCommand (36ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `o2o`.`course_instance_id`, `o2o`.`begin_date`, `o2o`.`course_id`, `o2o`.`end_date`, `o2o`.`invoice_date`, `o2o`.`learner_id`, `o2o`.`org_id`, `o2o`.`room_id`, `o2o`.`teacher_id`
FROM `ablemusic`.`one2one_course_instance` AS `o2o`
2019-07-02 11:13:11.289 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `c`.`course_id`, `c`.`course_category_id`, `c`.`course_name`, `c`.`course_type`, `c`.`duration`, `c`.`level`, `c`.`price`, `c`.`teacher_level`
FROM `ablemusic`.`course` AS `c`
2019-07-02 11:13:11.400 +12:00 [INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `gc`.`group_course_instance_id`, `gc`.`begin_date`, `gc`.`course_id`, `gc`.`end_date`, `gc`.`invoice_date`, `gc`.`is_activate`, `gc`.`is_started`, `gc`.`org_id`, `gc`.`room_id`, `gc`.`teacher_id`
FROM `ablemusic`.`group_course_instance` AS `gc`
2019-07-02 11:13:11.529 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `c0`.`course_id`, `c0`.`course_category_id`, `c0`.`course_name`, `c0`.`course_type`, `c0`.`duration`, `c0`.`level`, `c0`.`price`, `c0`.`teacher_level`
FROM `ablemusic`.`course` AS `c0`
2019-07-02 11:13:11.598 +12:00 [ERR] An exception occurred in the database while iterating the results of a query for context type 'Pegasus_backend.pegasusContext.ablemusicContext'.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
2019-07-02 11:13:11.619 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 3185.9185ms
2019-07-02 11:13:11.625 +12:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-07-02 11:13:11.654 +12:00 [WRN] The response has already started, the error page middleware will not be executed.
2019-07-02 11:13:11.660 +12:00 [ERR] Connection id "0HLNUF6MTD5JL", Request id "0HLNUF6MTD5JL:00000001": An unhandled exception was thrown by the application.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.GroupJoinIterator[TOuter,TInner,TKey,TResult](IEnumerable`1 outer, IEnumerable`1 inner, Func`2 outerKeySelector, Func`2 innerKeySelector, Func`3 resultSelector, IEqualityComparer`1 comparer)+MoveNext()
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2019-07-02 11:13:11.700 +12:00 [INF] Request finished in 3531.5946ms 200 application/json; charset=utf-8
2019-07-02 11:24:35.763 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:24:36.480 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 11:24:36.520 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:24:36.748 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 11:24:37.476 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 11:24:38.819 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:24:38.830 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 1341.8113ms.
2019-07-02 11:24:38.844 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.pegasusContext.LessonRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 11:24:38.973 +12:00 [WRN] The Include operation for navigation '[lr].CourseInstance.Course' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
2019-07-02 11:24:38.980 +12:00 [WRN] The Include operation for navigation '[lr].GroupCourseInstance.Course' is unnecessary and was ignored because the navigation is not reachable in the final query results. See https://go.microsoft.com/fwlink/?linkid=850303 for more information.
2019-07-02 11:24:39.943 +12:00 [INF] Executed DbCommand (39ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id` AS `LessonRemainId`, `lr`.`quantity`, `lr`.`term_id` AS `TermId0`, `lr`.`expiry_date` AS `ExpiryDate`, `lr`.`course_instance_id` AS `GroupCourseInstanceId`, `lr`.`learner_id` AS `LearnerId`, `lr.CourseInstance.Course`.`course_id` AS `CourseId`, `lr.CourseInstance.Course`.`course_name` AS `CourseName`, `lr.GroupCourseInstance.Course`.`course_id` AS `CourseId0`, `lr.GroupCourseInstance.Course`.`course_name` AS `CourseName0`, `lr`.`term_id` AS `TermId`, `lr.Term`.`term_name` AS `TermName`, `lr.Term`.`begin_date` AS `BeginDate`, `lr.Term`.`end_date` AS `EndDate`, `lr.Term`.`term_type` AS `TermType`, `lr.Term`.`week_quantity` AS `WeekQuantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:24:40.032 +12:00 [ERR] An exception occurred in the database while iterating the results of a query for context type 'Pegasus_backend.pegasusContext.ablemusicContext'.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
2019-07-02 11:24:40.048 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 3296.329ms
2019-07-02 11:24:40.053 +12:00 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2019-07-02 11:24:40.079 +12:00 [WRN] The response has already started, the error page middleware will not be executed.
2019-07-02 11:24:40.080 +12:00 [ERR] Connection id "0HLNUFD41M36G", Request id "0HLNUFD41M36G:00000001": An unhandled exception was thrown by the application.
System.InvalidOperationException: Nullable object must have a value.
   at lambda_method(Closure , TransparentIdentifier`2 )
   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()
   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue(JsonWriter writer, Object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)
   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2019-07-02 11:24:40.110 +12:00 [INF] Request finished in 3631.6975ms 200 application/json; charset=utf-8
2019-07-02 11:40:06.765 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:40:11.824 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 11:40:11.873 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:40:12.130 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 11:40:12.652 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 11:40:13.691 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:40:14.686 +12:00 [INF] Executed DbCommand (42ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:40:14.858 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2194.9728ms.
2019-07-02 11:40:14.872 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 11:40:14.934 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 2798.98ms
2019-07-02 11:40:14.943 +12:00 [INF] Request finished in 3120.6643ms 200 application/json; charset=utf-8
2019-07-02 11:56:28.351 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:56:31.844 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 11:56:31.893 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:56:32.102 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 11:56:32.630 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 11:56:33.699 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:56:34.704 +12:00 [INF] Executed DbCommand (47ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:56:34.988 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2346.4425ms.
2019-07-02 11:56:34.997 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.pegasusContext.LessonRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 11:56:35.049 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 2941.2588ms
2019-07-02 11:56:35.059 +12:00 [INF] Request finished in 3216.9813ms 200 application/json; charset=utf-8
2019-07-02 11:58:09.269 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 11:58:13.541 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 11:58:13.585 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 11:58:13.764 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 11:58:14.314 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 11:58:15.376 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 11:58:16.224 +12:00 [INF] Executed DbCommand (37ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 11:58:16.443 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2116.848ms.
2019-07-02 11:58:16.453 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.pegasusContext.LessonRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 11:58:16.505 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 2735.9004ms
2019-07-02 11:58:16.513 +12:00 [INF] Request finished in 2973.3114ms 200 application/json; charset=utf-8
2019-07-02 12:09:59.553 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:10:03.544 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 12:10:03.596 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:10:03.792 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 12:10:04.320 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 12:10:05.444 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:10:06.413 +12:00 [INF] Executed DbCommand (39ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:10:06.654 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2319.6225ms.
2019-07-02 12:10:06.662 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:10:06.762 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 2962.8494ms
2019-07-02 12:10:06.770 +12:00 [INF] Request finished in 3227.3903ms 200 application/json; charset=utf-8
2019-07-02 12:12:19.223 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:12:22.134 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 12:12:22.185 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:12:22.403 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 12:12:22.922 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 12:12:23.992 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:12:24.906 +12:00 [INF] Executed DbCommand (50ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:12:25.162 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2229.2516ms.
2019-07-02 12:12:25.171 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:12:25.238 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 2830.3581ms
2019-07-02 12:12:25.246 +12:00 [INF] Request finished in 3114.2362ms 200 application/json; charset=utf-8
2019-07-02 12:13:20.297 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:13:20.340 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:13:20.383 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:13:20.398 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:13:20.507 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:13:20.621 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:13:20.830 +12:00 [INF] Executed DbCommand (40ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:13:21.036 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:13:21.139 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:13:21.145 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 751.62160000000006ms.
2019-07-02 12:13:21.147 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:13:21.262 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 917.0285ms
2019-07-02 12:13:21.263 +12:00 [INF] Request finished in 966.5035ms 200 application/json; charset=utf-8
2019-07-02 12:13:50.125 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/test application/json 
2019-07-02 12:13:50.163 +12:00 [INF] Route matched with {action = "test", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend)
2019-07-02 12:13:50.168 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) - Validation state: "Valid"
2019-07-02 12:13:50.182 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:13:50.291 +12:00 [INF] Executed DbCommand (37ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:13:50.297 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 116.4329ms.
2019-07-02 12:13:50.299 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:13:50.301 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.test (Pegasus_backend) in 133.0225ms
2019-07-02 12:13:50.302 +12:00 [INF] Request finished in 177.4333ms 200 application/json; charset=utf-8
2019-07-02 12:16:36.251 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/1 application/json 
2019-07-02 12:16:36.259 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:16:36.262 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["1"]) - Validation state: "Valid"
2019-07-02 12:16:36.265 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:16:36.377 +12:00 [INF] Executed DbCommand (44ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:16:36.476 +12:00 [INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:16:36.607 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:36.702 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:36.802 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:36.905 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:36.997 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.102 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.210 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.312 +12:00 [INF] Executed DbCommand (36ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.421 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.524 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.620 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.721 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.817 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:37.914 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.019 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.124 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.226 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.329 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.438 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.541 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.649 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.745 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.848 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:38.941 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.033 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.128 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.249 +12:00 [INF] Executed DbCommand (53ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.362 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.472 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.571 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.677 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.774 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.873 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:39.974 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.077 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.169 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.263 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.364 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.463 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.562 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.669 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.764 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.857 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:40.949 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:41.041 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:41.137 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:41.229 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:16:41.233 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4968.7196ms.
2019-07-02 12:16:41.235 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:16:53.081 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 16820.8527ms
2019-07-02 12:16:53.083 +12:00 [INF] Request finished in 16832.0454ms 200 application/json; charset=utf-8
2019-07-02 12:18:06.387 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:18:06.391 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:18:06.394 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:18:06.397 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:18:06.499 +12:00 [INF] Executed DbCommand (37ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:18:06.595 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:18:06.728 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:18:06.821 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:18:06.922 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:18:06.936 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 539.5736ms.
2019-07-02 12:18:06.940 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:18:07.004 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 610.4394ms
2019-07-02 12:18:07.005 +12:00 [INF] Request finished in 617.5584ms 200 application/json; charset=utf-8
2019-07-02 12:20:10.732 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:20:14.760 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:20:14.821 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:20:15.068 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:20:15.714 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:20:16.853 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:20:17.875 +12:00 [INF] Executed DbCommand (46ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:20:18.239 +12:00 [INF] Executed DbCommand (40ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:20:18.477 +12:00 [INF] Executed DbCommand (41ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:20:18.641 +12:00 [INF] Executed DbCommand (37ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:20:18.757 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:20:18.764 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 3027.3721ms.
2019-07-02 12:20:18.773 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:20:18.948 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 3876.6253ms
2019-07-02 12:20:18.954 +12:00 [INF] Request finished in 4195.7885ms 200 application/json; charset=utf-8
2019-07-02 12:21:12.321 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:21:33.796 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:21:33.847 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:21:34.083 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:21:34.669 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:21:35.809 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:21:37.208 +12:00 [INF] Executed DbCommand (46ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:21:37.640 +12:00 [INF] Executed DbCommand (36ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:21:37.845 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:21:38.050 +12:00 [INF] Executed DbCommand (40ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:21:38.175 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:21:38.201 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 3503.1908000000003ms.
2019-07-02 12:21:38.218 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:21:38.485 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 4396.0194ms
2019-07-02 12:21:38.492 +12:00 [INF] Request finished in 4697.0014ms 200 application/json; charset=utf-8
2019-07-02 12:23:26.494 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:23:28.991 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:23:29.045 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:23:29.320 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:23:29.891 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:23:30.936 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:23:31.789 +12:00 [INF] Executed DbCommand (39ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:23:32.131 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:23:32.330 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:23:32.503 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:23:32.606 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:23:32.628 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2713.772ms.
2019-07-02 12:23:32.651 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:23:32.739 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 3415.6797ms
2019-07-02 12:23:32.752 +12:00 [INF] Request finished in 3761.1492ms 200 application/json; charset=utf-8
2019-07-02 12:24:07.898 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:24:09.680 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:24:09.743 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:24:09.973 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:24:10.558 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:24:11.588 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:24:12.550 +12:00 [INF] Executed DbCommand (45ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:24:13.010 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:24:13.203 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:24:13.373 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:24:13.470 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:24:13.478 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2902.157ms.
2019-07-02 12:24:13.488 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:24:13.688 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 3710.5579000000002ms
2019-07-02 12:24:13.693 +12:00 [INF] Request finished in 4015.3049ms 200 application/json; charset=utf-8
2019-07-02 12:25:21.072 +12:00 [INF] User profile is available. Using 'C:\Users\suxx1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2019-07-02 12:25:24.922 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/10070 application/json 
2019-07-02 12:25:24.970 +12:00 [WRN] Failed to determine the https port for redirect.
2019-07-02 12:25:25.184 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:25:25.720 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["10070"]) - Validation state: "Valid"
2019-07-02 12:25:26.742 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:25:27.683 +12:00 [INF] Executed DbCommand (37ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:25:28.008 +12:00 [INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:25:28.189 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:28.356 +12:00 [INF] Executed DbCommand (28ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:28.454 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:28.472 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 2730.4880000000003ms.
2019-07-02 12:25:28.497 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:25:28.569 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 3381.5921000000003ms
2019-07-02 12:25:28.578 +12:00 [INF] Request finished in 3656.8675ms 200 application/json; charset=utf-8
2019-07-02 12:25:51.884 +12:00 [INF] Request starting HTTP/1.1 GET http://localhost:5000/api/CourseRemaining/1 application/json 
2019-07-02 12:25:51.887 +12:00 [INF] Route matched with {action = "GetRemainLessons", controller = "CourseRemaining"}. Executing action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend)
2019-07-02 12:25:51.896 +12:00 [INF] Executing action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) with arguments (["1"]) - Validation state: "Valid"
2019-07-02 12:25:51.900 +12:00 [INF] Entity Framework Core 2.1.8-servicing-32085 initialized 'ablemusicContext' using provider 'MySql.Data.EntityFrameworkCore' with options: None
2019-07-02 12:25:52.007 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `lr`.`lesson_remain_id`, `lr`.`course_instance_id`, `lr`.`expiry_date`, `lr`.`group_course_instance_id`, `lr`.`learner_id`, `lr`.`quantity`, `lr`.`term_id`, `lr.GroupCourseInstance`.`group_course_instance_id`, `lr.GroupCourseInstance`.`begin_date`, `lr.GroupCourseInstance`.`course_id`, `lr.GroupCourseInstance`.`end_date`, `lr.GroupCourseInstance`.`invoice_date`, `lr.GroupCourseInstance`.`is_activate`, `lr.GroupCourseInstance`.`is_started`, `lr.GroupCourseInstance`.`org_id`, `lr.GroupCourseInstance`.`room_id`, `lr.GroupCourseInstance`.`teacher_id`, `lr.GroupCourseInstance.Course`.`course_id`, `lr.GroupCourseInstance.Course`.`course_category_id`, `lr.GroupCourseInstance.Course`.`course_name`, `lr.GroupCourseInstance.Course`.`course_type`, `lr.GroupCourseInstance.Course`.`duration`, `lr.GroupCourseInstance.Course`.`level`, `lr.GroupCourseInstance.Course`.`price`, `lr.GroupCourseInstance.Course`.`teacher_level`, `lr.CourseInstance`.`course_instance_id`, `lr.CourseInstance`.`begin_date`, `lr.CourseInstance`.`course_id`, `lr.CourseInstance`.`end_date`, `lr.CourseInstance`.`invoice_date`, `lr.CourseInstance`.`learner_id`, `lr.CourseInstance`.`org_id`, `lr.CourseInstance`.`room_id`, `lr.CourseInstance`.`teacher_id`, `lr.CourseInstance.Course`.`course_id`, `lr.CourseInstance.Course`.`course_category_id`, `lr.CourseInstance.Course`.`course_name`, `lr.CourseInstance.Course`.`course_type`, `lr.CourseInstance.Course`.`duration`, `lr.CourseInstance.Course`.`level`, `lr.CourseInstance.Course`.`price`, `lr.CourseInstance.Course`.`teacher_level`, `lr.Term`.`term_id`, `lr.Term`.`begin_date`, `lr.Term`.`end_date`, `lr.Term`.`term_name`, `lr.Term`.`term_type`, `lr.Term`.`week_quantity`
FROM `ablemusic`.`lesson_remain` AS `lr`
LEFT JOIN `ablemusic`.`group_course_instance` AS `lr.GroupCourseInstance` ON `lr`.`group_course_instance_id` = `lr.GroupCourseInstance`.`group_course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.GroupCourseInstance.Course` ON `lr.GroupCourseInstance`.`course_id` = `lr.GroupCourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`one2one_course_instance` AS `lr.CourseInstance` ON `lr`.`course_instance_id` = `lr.CourseInstance`.`course_instance_id`
LEFT JOIN `ablemusic`.`course` AS `lr.CourseInstance.Course` ON `lr.CourseInstance`.`course_id` = `lr.CourseInstance.Course`.`course_id`
LEFT JOIN `ablemusic`.`term` AS `lr.Term` ON `lr`.`term_id` = `lr.Term`.`term_id`
WHERE `lr`.`learner_id` = @__studentId_0
2019-07-02 12:25:52.108 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`invoice_id`, `i`.`begin_date`, `i`.`concert_fee`, `i`.`concert_fee_name`, `i`.`course_instance_id`, `i`.`course_name`, `i`.`created_at`, `i`.`due_date`, `i`.`end_date`, `i`.`group_course_instance_id`, `i`.`invoice_num`, `i`.`is_active`, `i`.`is_paid`, `i`.`learner_id`, `i`.`learner_name`, `i`.`lesson_fee`, `i`.`lesson_note_fee_name`, `i`.`lesson_quantity`, `i`.`note_fee`, `i`.`other1_fee`, `i`.`other1_fee_name`, `i`.`other2_fee`, `i`.`other2_fee_name`, `i`.`other3_fee`, `i`.`other3_fee_name`, `i`.`owing_fee`, `i`.`paid_fee`, `i`.`term_id`, `i`.`total_fee`
FROM `ablemusic`.`invoice` AS `i`
2019-07-02 12:25:52.251 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.348 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.446 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.542 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.648 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.744 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.840 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:52.941 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.048 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.141 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.246 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.349 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.442 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.545 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.653 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.753 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.866 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:53.969 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.078 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.174 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.276 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.373 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.469 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.577 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.669 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.765 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.857 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:54.953 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.048 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.145 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.249 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.364 +12:00 [INF] Executed DbCommand (40ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.464 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.562 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.665 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.777 +12:00 [INF] Executed DbCommand (38ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.885 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:55.978 +12:00 [INF] Executed DbCommand (31ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.113 +12:00 [INF] Executed DbCommand (44ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.267 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.370 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.472 +12:00 [INF] Executed DbCommand (33ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.575 +12:00 [INF] Executed DbCommand (32ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.680 +12:00 [INF] Executed DbCommand (29ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.782 +12:00 [INF] Executed DbCommand (34ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.894 +12:00 [INF] Executed DbCommand (35ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:56.998 +12:00 [INF] Executed DbCommand (30ms) [Parameters=[@__studentId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT `i`.`lesson_id`, `i`.`begin_time`, `i`.`course_instance_id`, `i`.`created_at`, `i`.`end_time`, `i`.`group_course_instance_id`, `i`.`invoice_id`, `i`.`is_canceled`, `i`.`is_changed`, `i`.`is_confirm`, `i`.`is_trial`, `i`.`learner_id`, `i`.`org_id`, `i`.`reason`, `i`.`room_id`, `i`.`teacher_id`, `i`.`trial_course_id`, `i.Invoice`.`invoice_id`, `i.Invoice`.`begin_date`, `i.Invoice`.`concert_fee`, `i.Invoice`.`concert_fee_name`, `i.Invoice`.`course_instance_id`, `i.Invoice`.`course_name`, `i.Invoice`.`created_at`, `i.Invoice`.`due_date`, `i.Invoice`.`end_date`, `i.Invoice`.`group_course_instance_id`, `i.Invoice`.`invoice_num`, `i.Invoice`.`is_active`, `i.Invoice`.`is_paid`, `i.Invoice`.`learner_id`, `i.Invoice`.`learner_name`, `i.Invoice`.`lesson_fee`, `i.Invoice`.`lesson_note_fee_name`, `i.Invoice`.`lesson_quantity`, `i.Invoice`.`note_fee`, `i.Invoice`.`other1_fee`, `i.Invoice`.`other1_fee_name`, `i.Invoice`.`other2_fee`, `i.Invoice`.`other2_fee_name`, `i.Invoice`.`other3_fee`, `i.Invoice`.`other3_fee_name`, `i.Invoice`.`owing_fee`, `i.Invoice`.`paid_fee`, `i.Invoice`.`term_id`, `i.Invoice`.`total_fee`
FROM `ablemusic`.`lesson` AS `i`
LEFT JOIN `ablemusic`.`invoice` AS `i.Invoice` ON `i`.`invoice_id` = `i.Invoice`.`invoice_id`
WHERE ((`i`.`learner_id` = @__studentId_0) AND ((`i`.`is_confirm` <> 1) OR `i`.`is_confirm` IS NULL)) AND ((`i`.`is_canceled` <> 1) OR `i`.`is_canceled` IS NULL)
2019-07-02 12:25:57.010 +12:00 [INF] Executed action method Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5110.7635ms.
2019-07-02 12:25:57.023 +12:00 [INF] Executing ObjectResult, writing value of type 'Pegasus_backend.Models.Result`1[[System.Collections.Generic.IEnumerable`1[[Pegasus_backend.Models.CourseRemain, Pegasus_backend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2019-07-02 12:25:57.028 +12:00 [INF] Executed action Pegasus_backend.Controllers.CourseRemainingController.GetRemainLessons (Pegasus_backend) in 5134.828ms
2019-07-02 12:25:57.030 +12:00 [INF] Request finished in 5146.1344ms 200 application/json; charset=utf-8
