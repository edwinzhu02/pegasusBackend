{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green150\blue149;\red34\green34\blue34;\red51\green99\blue164;
\red219\green113\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c58824\c58431;\csgenericrgb\c13333\c13333\c13333;\csgenericrgb\c20000\c38824\c64314;
\csgenericrgb\c85882\c44314\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 public\cf3  \cf2 async\cf3  \cf4 Task\cf3 <\cf4 IActionResult\cf3 > SaveProdPayment(\cf4 IEnumerable\cf3  <\cf4 PaymentTranModel\cf3 > paymentTranList)\uc0\u8232         \{\u8232 \u8232             \cf2 var\cf3  result = \cf2 new\cf3  \cf4 Result\cf3 <\cf4 IEnumerable\cf3 <\cf4 PaymentTranModel\cf3 >>();\uc0\u8232             \cf2 var\cf3  tranDetails = paymentTranList.ToArray()[\cf5 0\cf3 ].SoldTransaction.AsQueryable();\uc0\u8232 \u8232             \cf2 var\cf3  paymentDetail = paymentTranList.ToArray()[\cf5 0\cf3 ];\uc0\u8232             \cf4 Payment\cf3  payment = \cf2 new\cf3  \cf4 Payment\cf3 ();\uc0\u8232             _mapper.Map(paymentDetail, payment);\u8232             payment.CreatedAt = \cf4 DateTime\cf3 .Now;\uc0\u8232 \u8232             \cf2 int\cf3  i = \cf5 0\cf3 ;\uc0\u8232             \cf2 foreach\cf3  (\cf2 var\cf3  detail \cf2 in\cf3  tranDetails)\uc0\u8232             \{\u8232                 \cf2 var\cf3  stock = \cf2 await\cf3  _pegasusContext.Stock.FirstOrDefaultAsync(x => x.OrgId == paymentTranList.ToList()[\cf5 0\cf3 ].OrgId && x.ProductId == detail.ProductId);\uc0\u8232                 detail.BeforeQuantity = stock.Quantity;\u8232                 detail.AflterQuantity = detail.BeforeQuantity - detail.SoldQuantity;\u8232                 detail.LearnerId = paymentTranList.ToList()[\cf5 0\cf3 ].LearnerId;\uc0\u8232                 detail.PaymentId = payment.PaymentId;\u8232                 \cf2 var\cf3  name = \cf2 await\cf3  _pegasusContext.Product.FirstOrDefaultAsync(x => x.ProductId == detail.ProductId);\uc0\u8232                 \cf2 if\cf3  (detail.AflterQuantity < \cf5 0\cf3 )\uc0\u8232                 \{\u8232                     \cf2 throw\cf3  \cf2 new\cf3  \cf4 Exception\cf3 (name.ProductName + \cf5 " has not enough stock, only "\cf3  + stock.Quantity + \cf5 " left"\cf3 );\uc0\u8232                 \}\u8232                 detail.StockId = stock.StockId;\u8232                 detail.CreatedAt = \cf4 DateTime\cf3 .Now;\uc0\u8232                 \cf2 if\cf3  (detail.DiscountAmount != \cf2 null\cf3 )\uc0\u8232                 \{\u8232                     detail.DiscountedAmount = name.SellPrice * detail.SoldQuantity - detail.DiscountAmount;\u8232                 \}\u8232                 \cf2 else\cf3  \cf2 if\cf3  (detail.DiscountRate != \cf2 null\cf3 )\uc0\u8232                 \{\u8232                     detail.DiscountedAmount = name.SellPrice * detail.SoldQuantity * detail.DiscountRate;\u8232                 \}\u8232                 stock.Quantity -= detail.SoldQuantity;\u8232                 _pegasusContext.Stock.Update(stock);\u8232                 _mapper.Map(detail, payment.SoldTransaction.ToArray()[i]);\u8232                 i++;\u8232 \u8232             \}\u8232             \cf2 try\uc0\u8232 \cf3             \{\uc0\u8232                 \cf2 await\cf3  _pegasusContext.Payment.AddAsync(payment);\uc0\u8232                 \cf2 await\cf3  _pegasusContext.SaveChangesAsync();\uc0\u8232             \}\u8232             \cf2 catch\cf3  (\cf4 Exception\cf3  e)\uc0\u8232             \{\u8232                 result.ErrorMessage = e.Message;\u8232                 result.IsFound = \cf2 false\cf3 ;\uc0\u8232             \}\u8232             result.Data = paymentTranList;\u8232 \u8232             \cf2 return\cf3  Ok(result);\uc0\u8232         \}\u8232 }