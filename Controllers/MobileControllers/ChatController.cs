using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.Web.CodeGeneration.Contracts.Messaging;
using Pegasus_backend.Models;
using Pegasus_backend.pegasusContext;

namespace Pegasus_backend.Controllers.MobileControllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChatController : BasicController
    {
        private readonly pegasusContext.ablemusicContext _pegasusContext;
        private readonly IMapper _mapper;

        public ChatController(pegasusContext.ablemusicContext pegasusContext, IMapper mapper)
        {
            _pegasusContext = pegasusContext;
            _mapper = mapper;
        }

        [HttpGet]
        public IActionResult Get()
        {
            // server is sending data to the client only
            // sending generated data to all subscribed clients on the Transferchatdata event
            // every client if has a listener on the transferchatdata event, will receive a data generated by the DataManager

//            var timerManager = new TimeManager(() => _hub.Clients.All.SendAsync("Transferchatdata", DataManager.GetData()));
            // https://docs.microsoft.com/en-us/aspnet/core/signalr/hubcontext?view=aspnetcore-2.2

            return Ok(new {Message = "Request Completed"});
        }

        //GET: http://localhost:5000/api/Chat/GetRelatedStudent/:tutorId
        [Route("[action]/{id}")]
        [HttpGet]
        public async Task<IActionResult> GetRelatedStudent(int id)
        {
            Result<List<Learner>> result = new Result<List<Learner>>();
            var students = await _pegasusContext.Lesson.Where(x => x.TeacherId == id).Select(x => x).ToListAsync();
            if (students == null)
            {
                return NotFound("No students yet");
            }

            // remove duplicated learnerId
            List<int?> studentIdList = new List<int?>();
            foreach (var student in students)
            {
                if (!studentIdList.Contains(student.LearnerId))
                {
                    studentIdList.Add(student.LearnerId);
                }
            }

            // get learner details
            List<Learner> learnerList = new List<Learner>();
            foreach (var Id in studentIdList)
            {
                var detail = await _pegasusContext.Learner.Where(x => x.LearnerId == Id)
                    .FirstOrDefaultAsync();
                if (detail != null)
                {
                    learnerList.Add(detail);
                }
                else
                {
                    return NotFound("Student not found");
                }
            }

            if (learnerList.Count == 0)
            {
                return NotFound("No students found");
            }

            result.Data = learnerList;
            return Ok(result);
        }

        //GET: http://localhost:5000/api/Chat/GetRelatedStudent/:studentId

        [Route("[action]/{id}")]
        [HttpGet]
        public async Task<IActionResult> GetRelatedTeacher(int id)
        {
            Result<List<Teacher>> result = new Result<List<Teacher>>();
            var teachers = await _pegasusContext.Lesson.Where(x => x.LearnerId == id).Select(x => x).ToListAsync();
            if (teachers == null)
            {
                return NotFound("No teachers yet");
            }

            // Remove the duplicated teachdId
            List<int?> teacherIdList = new List<int?>();
            foreach (var teacher in teachers)
            {
                if (!teacherIdList.Contains(teacher.TeacherId))
                {
                    teacherIdList.Add(teacher.TeacherId);
                }
            }

            List<Teacher> teacherList = new List<Teacher>();
            foreach (var Id in teacherIdList)
            {
                var detail = await _pegasusContext.Teacher.Where(x => x.TeacherId == Id)
                    .FirstOrDefaultAsync();
                if (detail != null)
                {
                    teacherList.Add(detail);
                }
                else
                {
                    return NotFound("Student not found");
                }
            }

            if (teacherList.Count == 0)
            {
                return NotFound("No students yet");
            }

            result.Data = teacherList;
            return Ok(result);
        }


        [HttpPost]
        public async Task<IActionResult> Post(ChatMessageModel chatMessageModel)
        {
            Result<ChatMessageModel> result = new Result<ChatMessageModel>();
            chatMessageModel.CreateAt = DateTime.Now;
            ChatMessage chatMessage = new ChatMessage();
            try
            {
                _mapper.Map(chatMessageModel, chatMessage);
                await _pegasusContext.ChatMessage.AddAsync(chatMessage);
                await _pegasusContext.SaveChangesAsync();
            }
            catch (Exception e)
            {
                result.ErrorMessage = e.Message;
                result.IsSuccess = false;
                return BadRequest(result);
            }

            result.Data = chatMessageModel;
            return Ok(result);
        }
    }
}