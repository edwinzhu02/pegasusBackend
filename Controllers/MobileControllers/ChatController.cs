using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using Microsoft.VisualStudio.Web.CodeGeneration.Contracts.Messaging;
using Pegasus_backend.Models;
using Pegasus_backend.pegasusContext;

namespace Pegasus_backend.Controllers.MobileControllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChatController : BasicController
    {
        private readonly pegasusContext.ablemusicContext _pegasusContext; 
        private readonly IMapper _mapper;

        public ChatController(pegasusContext.ablemusicContext pegasusContext, IMapper mapper)
        {
            _pegasusContext = pegasusContext;
            _mapper = mapper;
        }
        [HttpGet]
        public IActionResult Get()
        {
            // server is sending data to the client only
            // sending generated data to all subscribed clients on the Transferchatdata event
            // every client if has a listener on the transferchatdata event, will receive a data generated by the DataManager

//            var timerManager = new TimeManager(() => _hub.Clients.All.SendAsync("Transferchatdata", DataManager.GetData()));
            // https://docs.microsoft.com/en-us/aspnet/core/signalr/hubcontext?view=aspnetcore-2.2

            return Ok(new {Message = "Request Completed"});
        }

        [HttpPost]
        public async Task<IActionResult> Post(ChatMessageModel chatMessageModel )
        {
            Result<ChatMessageModel> result = new Result<ChatMessageModel>();
            chatMessageModel.CreateAt = DateTime.Now;
            ChatMessage chatMessage = new ChatMessage();
            try
            {
                _mapper.Map(chatMessageModel, chatMessage);
                await _pegasusContext.ChatMessage.AddAsync(chatMessage);
                await _pegasusContext.SaveChangesAsync();
            }
            catch (Exception e)
            {
                result.ErrorMessage = e.Message;
                result.IsSuccess = false;
                return BadRequest(result);
            }
            result.Data = chatMessageModel;
            return Ok(result);
        }
    }
}